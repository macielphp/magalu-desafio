"""
An√°lise Estrat√©gica: Novo Centro de Distribui√ß√£o Magalu - Nordeste
M√≥dulo principal para an√°lise comparativa entre Recife e Salvador
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import folium
from sklearn.preprocessing import StandardScaler
from sklearn.metrics.pairwise import euclidean_distances
import warnings
warnings.filterwarnings('ignore')

class AnaliseCD:
    """
    Classe para an√°lise estrat√©gica do novo Centro de Distribui√ß√£o
    """
    
    def __init__(self):
        """Inicializa a an√°lise carregando os dados"""
        self.cidades = pd.read_csv('data/cidades_nordeste.csv')
        self.infraestrutura = pd.read_csv('data/infraestrutura_logistica.csv')
        self.tempos_entrega = pd.read_csv('data/tempos_entrega.csv')
        
        # Configura√ß√µes de estilo
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
        
    def analise_demografica(self):
        """An√°lise demogr√°fica e econ√¥mica das cidades"""
        print("=== AN√ÅLISE DEMOGR√ÅFICA E ECON√îMICA ===\n")
        
        # Popula√ß√£o total atendida
        recife_pop = self.cidades[self.cidades['cidade'].isin(['Natal', 'Jo√£o Pessoa', 'Macei√≥', 'Aracaju'])]['populacao'].sum()
        salvador_pop = self.cidades[self.cidades['cidade'].isin(['Macei√≥', 'Aracaju', 'Teresina', 'S√£o Lu√≠s'])]['populacao'].sum()
        
        print(f"Popula√ß√£o total atendida por Recife: {recife_pop:,} habitantes")
        print(f"Popula√ß√£o total atendida por Salvador: {salvador_pop:,} habitantes")
        print(f"Diferen√ßa: {abs(recife_pop - salvador_pop):,} habitantes\n")
        
        # PIB total
        recife_pib = self.cidades[self.cidades['cidade'].isin(['Natal', 'Jo√£o Pessoa', 'Macei√≥', 'Aracaju'])]['pib_milhoes'].sum()
        salvador_pib = self.cidades[self.cidades['cidade'].isin(['Macei√≥', 'Aracaju', 'Teresina', 'S√£o Lu√≠s'])]['pib_milhoes'].sum()
        
        print(f"PIB total atendido por Recife: R$ {recife_pib:,} milh√µes")
        print(f"PIB total atendido por Salvador: R$ {salvador_pib:,} milh√µes")
        print(f"Diferen√ßa: R$ {abs(recife_pib - salvador_pib):,} milh√µes\n")
        
        return {
            'recife_populacao': recife_pop,
            'salvador_populacao': salvador_pop,
            'recife_pib': recife_pib,
            'salvador_pib': salvador_pib
        }
    
    def analise_custos_imobiliarios(self):
        """An√°lise comparativa de custos imobili√°rios"""
        print("=== AN√ÅLISE DE CUSTOS IMOBILI√ÅRIOS ===\n")
        
        recife_custo = self.cidades[self.cidades['cidade'] == 'Recife']['preco_terreno_m2'].iloc[0]
        salvador_custo = self.cidades[self.cidades['cidade'] == 'Salvador']['preco_terreno_m2'].iloc[0]
        
        print(f"Custo do terreno em Recife: R$ {recife_custo}/m¬≤")
        print(f"Custo do terreno em Salvador: R$ {salvador_custo}/m¬≤")
        print(f"Diferen√ßa: R$ {abs(recife_custo - salvador_custo)}/m¬≤")
        print(f"Salvador √© {(recife_custo/salvador_custo - 1)*100:.1f}% mais barato\n")
        
        return {
            'recife_custo': recife_custo,
            'salvador_custo': salvador_custo
        }
    
    def analise_tempos_entrega(self):
        """An√°lise de tempos de entrega para as capitais da regi√£o"""
        print("=== AN√ÅLISE DE TEMPOS DE ENTREGA ===\n")
        
        # Tempos m√©dios de entrega
        recife_tempos = self.tempos_entrega[self.tempos_entrega['origem'] == 'Recife']['tempo_entrega_horas']
        salvador_tempos = self.tempos_entrega[self.tempos_entrega['origem'] == 'Salvador']['tempo_entrega_horas']
        
        print(f"Tempo m√©dio de entrega - Recife: {recife_tempos.mean():.1f} horas")
        print(f"Tempo m√©dio de entrega - Salvador: {salvador_tempos.mean():.1f} horas")
        print(f"Recife √© {(salvador_tempos.mean()/recife_tempos.mean() - 1)*100:.1f}% mais r√°pido\n")
        
        # Cobertura de entrega r√°pida (< 6 horas)
        recife_rapido = len(recife_tempos[recife_tempos < 6])
        salvador_rapido = len(salvador_tempos[salvador_tempos < 6])
        
        print(f"Cidades com entrega < 6h - Recife: {recife_rapido}")
        print(f"Cidades com entrega < 6h - Salvador: {salvador_rapido}\n")
        
        return {
            'recife_tempo_medio': recife_tempos.mean(),
            'salvador_tempo_medio': salvador_tempos.mean(),
            'recife_entrega_rapida': recife_rapido,
            'salvador_entrega_rapida': salvador_rapido
        }
    
    def analise_infraestrutura(self):
        """An√°lise de infraestrutura log√≠stica"""
        print("=== AN√ÅLISE DE INFRAESTRUTURA LOG√çSTICA ===\n")
        
        recife_infra = self.infraestrutura[self.infraestrutura['cidade'] == 'Recife'].iloc[0]
        salvador_infra = self.infraestrutura[self.infraestrutura['cidade'] == 'Salvador'].iloc[0]
        
        print("RECIFE:")
        print(f"  - Porto: {'Sim' if recife_infra['porto'] else 'N√£o'}")
        print(f"  - Aeroporto: {'Sim' if recife_infra['aeroporto'] else 'N√£o'}")
        print(f"  - Rodovias Federais: {recife_infra['rodovias_federais']}")
        print(f"  - Ferrovias: {'Sim' if recife_infra['ferrovias'] else 'N√£o'}")
        print(f"  - Centros de Distribui√ß√£o: {recife_infra['centros_distribuicao']}")
        print(f"  - √çndice de Conectividade: {recife_infra['indice_connectividade']:.2f}\n")
        
        print("SALVADOR:")
        print(f"  - Porto: {'Sim' if salvador_infra['porto'] else 'N√£o'}")
        print(f"  - Aeroporto: {'Sim' if salvador_infra['aeroporto'] else 'N√£o'}")
        print(f"  - Rodovias Federais: {salvador_infra['rodovias_federais']}")
        print(f"  - Ferrovias: {'Sim' if salvador_infra['ferrovias'] else 'N√£o'}")
        print(f"  - Centros de Distribui√ß√£o: {salvador_infra['centros_distribuicao']}")
        print(f"  - √çndice de Conectividade: {salvador_infra['indice_connectividade']:.2f}\n")
        
        return {
            'recife_infra': recife_infra,
            'salvador_infra': salvador_infra
        }
    
    def calcular_score_estrategico(self):
        """Calcula score estrat√©gico para cada cidade"""
        print("=== SCORE ESTRAT√âGICO ===\n")
        
        # Pesos para cada crit√©rio
        pesos = {
            'populacao': 0.25,
            'pib': 0.20,
            'tempo_entrega': 0.25,
            'custo_imobiliario': 0.15,
            'infraestrutura': 0.15
        }
        
        # Normalizar dados
        demografica = self.analise_demografica()
        custos = self.analise_custos_imobiliarios()
        tempos = self.analise_tempos_entrega()
        infra = self.analise_infraestrutura()
        
        # Scores (0-100)
        recife_scores = {
            'populacao': (demografica['recife_populacao'] / (demografica['recife_populacao'] + demografica['salvador_populacao'])) * 100,
            'pib': (demografica['recife_pib'] / (demografica['recife_pib'] + demografica['salvador_pib'])) * 100,
            'tempo_entrega': (1 - tempos['recife_tempo_medio'] / (tempos['recife_tempo_medio'] + tempos['salvador_tempo_medio'])) * 100,
            'custo_imobiliario': (1 - custos['recife_custo'] / (custos['recife_custo'] + custos['salvador_custo'])) * 100,
            'infraestrutura': infra['recife_infra']['indice_connectividade'] * 100
        }
        
        salvador_scores = {
            'populacao': (demografica['salvador_populacao'] / (demografica['recife_populacao'] + demografica['salvador_populacao'])) * 100,
            'pib': (demografica['salvador_pib'] / (demografica['recife_pib'] + demografica['salvador_pib'])) * 100,
            'tempo_entrega': (1 - tempos['salvador_tempo_medio'] / (tempos['recife_tempo_medio'] + tempos['salvador_tempo_medio'])) * 100,
            'custo_imobiliario': (1 - custos['salvador_custo'] / (custos['recife_custo'] + custos['salvador_custo'])) * 100,
            'infraestrutura': infra['salvador_infra']['indice_connectividade'] * 100
        }
        
        # Score final ponderado
        recife_final = sum(recife_scores[k] * pesos[k] for k in pesos.keys())
        salvador_final = sum(salvador_scores[k] * pesos[k] for k in pesos.keys())
        
        print(f"Score Estrat√©gico - Recife: {recife_final:.1f}/100")
        print(f"Score Estrat√©gico - Salvador: {salvador_final:.1f}/100")
        print(f"Diferen√ßa: {abs(recife_final - salvador_final):.1f} pontos\n")
        
        vencedor = "Recife" if recife_final > salvador_final else "Salvador"
        print(f"üèÜ RECOMENDA√á√ÉO: {vencedor.upper()}\n")
        
        return {
            'recife_score': recife_final,
            'salvador_score': salvador_final,
            'vencedor': vencedor,
            'recife_detalhado': recife_scores,
            'salvador_detalhado': salvador_scores
        }
    
    def gerar_visualizacoes(self):
        """Gera visualiza√ß√µes da an√°lise"""
        print("Gerando visualiza√ß√µes...")
        
        # 1. Compara√ß√£o de popula√ß√£o e PIB
        fig, axes = plt.subplots(1, 2, figsize=(15, 6))
        
        # Popula√ß√£o
        cidades_principais = ['Recife', 'Salvador', 'Fortaleza']
        dados_principais = self.cidades[self.cidades['cidade'].isin(cidades_principais)]
        
        axes[0].bar(dados_principais['cidade'], dados_principais['populacao'], 
                   color=['#FF6B6B', '#4ECDC4', '#45B7D1'])
        axes[0].set_title('Popula√ß√£o das Principais Cidades', fontsize=14, fontweight='bold')
        axes[0].set_ylabel('Popula√ß√£o')
        axes[0].tick_params(axis='x', rotation=45)
        
        # PIB
        axes[1].bar(dados_principais['cidade'], dados_principais['pib_milhoes'], 
                   color=['#FF6B6B', '#4ECDC4', '#45B7D1'])
        axes[1].set_title('PIB das Principais Cidades (Milh√µes R$)', fontsize=14, fontweight='bold')
        axes[1].set_ylabel('PIB (Milh√µes R$)')
        axes[1].tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        plt.savefig('reports/comparacao_populacao_pib.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        # 2. Mapa de calor de tempos de entrega
        pivot_tempos = self.tempos_entrega.pivot(index='origem', columns='destino', values='tempo_entrega_horas')
        
        plt.figure(figsize=(10, 6))
        sns.heatmap(pivot_tempos, annot=True, cmap='YlOrRd', fmt='.1f', cbar_kws={'label': 'Tempo (horas)'})
        plt.title('Tempos de Entrega entre Cidades', fontsize=14, fontweight='bold')
        plt.tight_layout()
        plt.savefig('reports/mapa_tempos_entrega.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        # 3. Radar chart comparativo
        scores = self.calcular_score_estrategico()
        
        categorias = list(scores['recife_detalhado'].keys())
        recife_values = list(scores['recife_detalhado'].values())
        salvador_values = list(scores['salvador_detalhado'].values())
        
        angles = np.linspace(0, 2 * np.pi, len(categorias), endpoint=False).tolist()
        recife_values += recife_values[:1]
        salvador_values += salvador_values[:1]
        angles += angles[:1]
        
        fig, ax = plt.subplots(figsize=(10, 10), subplot_kw=dict(projection='polar'))
        
        ax.plot(angles, recife_values, 'o-', linewidth=2, label='Recife', color='#FF6B6B')
        ax.fill(angles, recife_values, alpha=0.25, color='#FF6B6B')
        
        ax.plot(angles, salvador_values, 'o-', linewidth=2, label='Salvador', color='#4ECDC4')
        ax.fill(angles, salvador_values, alpha=0.25, color='#4ECDC4')
        
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels([cat.replace('_', ' ').title() for cat in categorias])
        ax.set_ylim(0, 100)
        ax.set_title('Compara√ß√£o Estrat√©gica: Recife vs Salvador', size=16, fontweight='bold')
        ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.0))
        
        plt.tight_layout()
        plt.savefig('reports/radar_chart_comparativo.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print("Visualiza√ß√µes salvas na pasta 'reports/'")
    
    def gerar_relatorio_final(self):
        """Gera relat√≥rio final da an√°lise"""
        print("=== RELAT√ìRIO FINAL ===\n")
        
        # Executar todas as an√°lises
        demografica = self.analise_demografica()
        custos = self.analise_custos_imobiliarios()
        tempos = self.analise_tempos_entrega()
        infra = self.analise_infraestrutura()
        scores = self.calcular_score_estrategico()
        
        # Gerar visualiza√ß√µes
        self.gerar_visualizacoes()
        
        print("=== PRINCIPAIS FATORES DA DECIS√ÉO ===\n")
        
        if scores['vencedor'] == 'Recife':
            print("‚úÖ RECIFE - VANTAGENS:")
            print("  ‚Ä¢ Melhor posicionamento geogr√°fico para atendimento r√°pido")
            print("  ‚Ä¢ Infraestrutura log√≠stica superior")
            print("  ‚Ä¢ Tempos de entrega menores para a maioria das capitais")
            print("  ‚Ä¢ Maior √≠ndice de conectividade")
            print("\n‚ùå RECIFE - DESVANTAGENS:")
            print("  ‚Ä¢ Custos imobili√°rios mais elevados")
            print("  ‚Ä¢ Popula√ß√£o total atendida menor")
            
        else:
            print("‚úÖ SALVADOR - VANTAGENS:")
            print("  ‚Ä¢ Maior popula√ß√£o total atendida")
            print("  ‚Ä¢ Custos imobili√°rios mais baixos")
            print("  ‚Ä¢ Maior PIB total da regi√£o atendida")
            print("\n‚ùå SALVADOR - DESVANTAGENS:")
            print("  ‚Ä¢ Tempos de entrega maiores")
            print("  ‚Ä¢ Posicionamento geogr√°fico menos estrat√©gico")
        
        print(f"\nüéØ RECOMENDA√á√ÉO FINAL: {scores['vencedor'].upper()}")
        print(f"Score: {scores[scores['vencedor'].lower() + '_score']:.1f}/100")
        
        return scores

if __name__ == "__main__":
    # Executar an√°lise completa
    analise = AnaliseCD()
    resultado = analise.gerar_relatorio_final()
